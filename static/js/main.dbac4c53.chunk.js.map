{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.dbac4c53.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\r\nimport {loadTweets} from '../lookup'\r\n\r\nexport function TweetsComponent(props){\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) =>{\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      let tempNewTweets = [...newTweets]\r\n      tempNewTweets.unshift({\r\n        content: newVal,\r\n        likes: 0,\r\n        id: 12312\r\n      })\r\n      setNewTweets(tempNewTweets)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n      <div className='col-12 mb-3'>\r\n        <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n              \r\n            </textarea>\r\n            <button type='submit' className=\"btn btn-primary my-3\">Tweet</button>\r\n          </form>\r\n        </div>\r\n      <TweetList newTweets={newTweets}/>\r\n      </div>\r\n}\r\n\r\nexport function TweetList(props){\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    useEffect(() =>{\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length){\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n      const myCallback = (response, status) => {\r\n        \r\n        if (status === 200) {\r\n          setTweetsInit(response)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n      }\r\n      loadTweets(myCallback)\r\n    }, [])\r\n    return tweets.map((item, index) => {\r\n        return <Tweet tweet={item} className=\"my-5 py-5 border bg-white text-dark\" key={index} />\r\n    })\r\n}\r\n            \r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    \r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      if(action.type === 'like'){\r\n        if(userLike === true){\r\n          setLikes(likes - 1)\r\n          setUserLike(false)\r\n        } else {\r\n          setLikes(tweet.likes + 1)\r\n          setUserLike(true)\r\n        }\r\n        \r\n      }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n  \r\nexport function Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n    return <div className ={className} >\r\n      <p>{tweet.id } - {tweet.content} </p>\r\n      <div className=\"btn btn-group\">\r\n        <ActionBtn tweet={tweet} action={{type: \"like\", display: \"Likes\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type: \"unlike\", display: \"Unlike\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type: \"unlike\", display: \"Retweet\"}}/>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n","\r\n\r\nexport function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = \"http://localhost:8000/api/tweets/\"\r\n    const responseType = \"json\"\r\n  \r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n  \r\n    xhr.onload = function () {\r\n      callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      callback({\r\n        \"message\": \"the request was an error\"\r\n      }, 400)\r\n    }\r\n    xhr.send()\r\n  }","import React, {\n  useEffect,\n  useState\n} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n  \n\n  return ( \n    <div className =\"App\">\n    <header className=\"App-header\">\n    <img src={logo} className=\"App-logo\" alt = \"logo\" />\n    <p>\n      Edit <code>src/App.js</code> and save to reload. \n    </p> \n    <div className=\"container\">\n      {<TweetsComponent />}\n    </div>\n    <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\"  rel=\"noopener noreferrer\">\n    \n    </a > </header> </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets';\nimport reportWebVitals from './reportWebVitals';\n\nconst appEl = document.getElementById('root')\nif(appEl){\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetsEl = document.getElementById('tweetme-2')\nif(tweetsEl){\n  ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}